"use client";

import React from "react";
import { useState, useEffect, useRef, useCallback } from "react";
import { ArrowUp, Trash } from "lucide-react";
import { cn } from "@/lib/utils";
import { toast } from "sonner";
import ReactMarkdown from 'react-markdown';
import { Bot } from "lucide-react";
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/cjs/styles/prism';
import "@/styles/fade-in.css";
import remarkMath from 'remark-math';
import rehypeKatex from 'rehype-katex';
import 'katex/dist/katex.min.css';
import { Handle, Position } from '@xyflow/react';

const AiResponse = ({ data: { title, solution } }: { data: { title: string, solution: string } }) => {
  // if title or solution is undefined, return null, not render the node
  if (title === undefined || solution === undefined) {
    return null;
  }

  // console.log("content - ai-response", content);
  return (
    <div
      className="fade-in-1"
      style={{
        padding: 10,
        backgroundColor: "rgba(240, 240, 240, 0.7)",
        border: "2px solid rgba(255, 255, 255, 0.8)",
        borderRadius: 12,
        boxShadow: "0 4px 8px rgba(0, 0, 0, 0.1)",
        color: "#004d40",
        fontFamily: "Arial, sans-serif",
        fontSize: "14px",
        width: "450px",
        backdropFilter: "blur(20px)",
      }}
    >
      <Handle type="target" position={Position.Top} id="b" />
      <div className="text-sm text-gray-500 font-bold mb-2">{"AI Response"}</div>
      {/* render the content generated by the ai */}
      <ReactMarkdown
        remarkPlugins={[remarkMath]}
        rehypePlugins={[rehypeKatex]}
        components={{
          code: ({ node, inline, className, children, ...props }: {
            node?: any;
            inline?: boolean;
            className?: string;
            children?: React.ReactNode;
          }) => {
            const match = /language-(\w+)/.exec(className || '');
            const lang = match ? match[1] : '';

            if (inline || !lang) {
              return (
                <code className="bg-gray-700 rounded px-1 text-white" {...props}>
                  {children}
                </code>
              );
            }
            return (
              <SyntaxHighlighter
                language={lang || 'text'}
                style={vscDarkPlus}
                customStyle={{
                  margin: 0,
                  borderRadius: '0.375rem',
                  background: '#1e1e1e'
                }}
                PreTag="div"
              >
                {String(children).replace(/\n$/, '')}
              </SyntaxHighlighter>
            );
          },
          a: ({ node, ...props }) => <a target="_blank" rel="noopener noreferrer" {...props} />,
        }}
      >
        {`Title: ${title}\n\nSolution: ${solution}`}
      </ReactMarkdown>
    </div>
  );
};

export default AiResponse;